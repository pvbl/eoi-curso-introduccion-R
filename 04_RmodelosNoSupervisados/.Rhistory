v2 <- c(309.306, 165.8)
# Construimos la matriz
result <- matrix(c(v0, v1, v2), nrow = 3, byrow = TRUE)
# definimos nombres de regiones y definiciones de los elementos de los vectores
region <- c("ESPAÑA", "FUERA-ESPAÑA")
titles <- c("VIDEOS", "AUDIOS", "CAMARAS")
# definimos el nombre de las columnas regiones
colnames(result)<- region
# definimos el nombre de las filas con titulos
rownames(result)<-titles
# matriz
result
# Construimos de nuevo la matriz con un método diferente
vt <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)
result <- matrix(vt, nrow = 3, byrow = TRUE,
dimnames = list(c("VIDEOS", "AUDIOS", "CAMARAS"),
c("ESPAÑA", "FUERA-ESPAÑA")))
# hacemos sumas de España-America
worldwide_vector <- rowSums(result)
worldwide_vector
result
all_wwv_res
# Construct star_wars_matrix
vt <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)
result <- matrix(result, nrow = 3, byrow = TRUE,
dimnames = list(c("VIDEOS", "AUDIOS", "CAMARAS"),
c("ESPAÑA", "FUERA-ESPAÑA")))
# The worldwide box office figures
worldwide <- rowSums(result)
# concatenamos el total
all_wwv_res <- cbind(result,worldwide)
all_wwv_res
# Seleccionamos FUERA-DESPAÑA para todo
non_es_all <- total[,2]
# Seleccionamos FUERA-DESPAÑA para todo
non_es_all <- total[,2]
MOBILE <- c(70, 100.34, 90.8)
names(MOBILE)<-c("ESPAÑA","FUERA-ESPAÑA","worldwide")
# Combinamos
total <- rbind(all_wwv_res,MOBILE)
total
# Seleccionamos FUERA-DESPAÑA para todo
non_es_all <- total[,2]
# promedio non-ES
mean(non_es_all)
# Seleccionamos el FUERA-ES para VIDEOS y AUDIOS
non_es_some <- total[1:2,2]
# promedio FUERA-ES para VIDEOS  y AUDIOS
mean(non_es_some)
# division
visitors <- total/5
visitors
vt <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8,60.23, 34.34, 2405.435, 233.4, 34.36, 16.65)
vt<-matrix(vt,nrow = 4,byrow = TRUE,  dimnames = list(c("VIDEOS", "AUDIOS", "CAMARAS","MOBILE"),
c("ESPAÑA", "FUERA-ESPAÑA","worldwide")))
# division matricial
visitors <- total/vt
es_visitors <- visitors[,1]
# promedio de es_visitors
mean(es_visitors)
visitors
a1<-matrix(1:12,nrows=3,byrow=TRUE)
a1<-matrix(1:12,nrow=3,byrow=TRUE)
a2<-matrix(1:12,nrow=4,byrow=FALSE)
print(a1)
print(a2)
rowMeans(a1)
rowMeans(a1)
colMeans(a1)
# genero
sex_vector <- c("Hombre", "Mujer", "Mujer", "Hombre", "Hombre")
# lo convertimos a factores
factor_sex_vector <-factor(sex_vector)
factor_sex_vector
sex_vector
factor_sex_vector
# animales
animals_vector <- c("Gato", "Jirafa", "Mono", "Caballo")
factor_animals_vector <- factor(animals_vector)
factor_animals_vector
# temperatura
temperature_vector <- c("Alto", "Bajo", "Alto","Bajo", "Medio")
factor_temperature_vector <- factor(temperature_vector, order = TRUE)
factor_temperature_vector
# mujeres, hombres
survey_vector <- c("M", "H", "H", "M", "M")
factor_survey_vector <- factor(survey_vector)
# especificamos niveles
levels(factor_survey_vector) <-c("Hombre","Mujer")
factor_survey_vector
# vemos el sumario
summary(survey_vector)
summary(factor_survey_vector)
# hombre
male <- factor_survey_vector[1]
# mujer
female <- factor_survey_vector[2]
# Es hombre> mujer?
male > female
# Create speed_vector
speed_vector <- c("medium", "slow", "slow", "medium", "fast")
# Convert speed_vector to ordered factor vector
factor_speed_vector <- factor(speed_vector,ordered=TRUE,levels=c("slow","medium","fast"))
# Print factor_speed_vector
factor_speed_vector
summary(factor_speed_vector)
# Create speed_vector
speed_vector <- c("medium", "slow", "slow", "medium", "fast")
# Convert speed_vector to ordered factor vector
factor_speed_vector <- factor(speed_vector,ordered=TRUE,levels=c("slow","medium","fast"))
# Print factor_speed_vector
factor_speed_vector
summary(factor_speed_vector)
# mujeres, hombres
survey_vector <- c("M", "H", "H", "M", "M")
factor_survey_vector <- factor(survey_vector,order=TRUE)
# especificamos niveles
levels(factor_survey_vector) <-c("Hombre","Mujer")
factor_survey_vector
# mujeres, hombres
survey_vector <- c("M", "H", "H", "M", "M")
factor_survey_vector <- factor(survey_vector,order=TRUE,levels=c("Mujer","Hombre"))
# especificamos niveles
levels(factor_survey_vector) <-c("Hombre","Mujer")
factor_survey_vector
# mujeres, hombres
survey_vector <- c("M", "H", "H", "M", "M")
factor_survey_vector <- factor(survey_vector,order=TRUE,levels=c("Mujer","Hombre"))
# especificamos niveles
#levels(factor_survey_vector) <-c("Hombre","Mujer")
factor_survey_vector
# hombre
male <- factor_survey_vector[1]
# mujer
female <- factor_survey_vector[2]
# Es hombre> mujer?
male > female
# mujeres, hombres
survey_vector <- c("M", "H", "H", "M", "M")
factor_survey_vector <- factor(survey_vector,order=TRUE,levels=c("Mujer","Hombre"))
# especificamos niveles
#levels(factor_survey_vector) <-c("Hombre","Mujer")
factor_survey_vector
# mujeres, hombres
survey_vector <- c("M", "H", "H", "M", "M")
factor_survey_vector <- factor(survey_vector,order=TRUE,levels=c("M","H"))
# especificamos niveles
#levels(factor_survey_vector) <-c("Hombre","Mujer")
factor_survey_vector
# mujeres, hombres
survey_vector <- c("M", "H", "H", "M", "M")
factor_survey_vector <- factor(survey_vector,order=TRUE,levels=c("H","M"))
# especificamos niveles
#levels(factor_survey_vector) <-c("Hombre","Mujer")
factor_survey_vector
# hombre
male <- factor_survey_vector[1]
# mujer
female <- factor_survey_vector[2]
# Es hombre> mujer?
male > female
# mujeres, hombres
survey_vector <- c("M", "H", "H", "M", "M")
factor_survey_vector <- factor(survey_vector)
# especificamos niveles
levels(factor_survey_vector) <-c("Hombre","Mujer")
factor_survey_vector
# definimos los vectores
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# creamos un data frame de los vectores
planets_df <- data.frame(name,type,diameter,rotation,rings)
planets_df
str(planets_df)
planets_df[order(planets_df$diameter),]
order(planets_df$diameter)
planets_df[order(planets_df$diameter),]
planets_df$name
planets_df$type
planets_df["type"]
planets_df$type
# seleccionar los 5 primeros valores de diametros
planets_df[1:5,"diameter"]
# seleccionar todos los anillos
rings_vector <-planets_df[,"rings"]
rings_vector
#seleccionamos todos los planetas con anillos
planets_df[rings_vector, ]
planets_df$constant = 1
planets_df
View(a1)
colMeans(planets_df)
planets_df
mean(planets_df)
mean?
```
apply(planets_df,mean)
apply(planets_df,FUN=mean)
help(apply)
apply(planets_df,c(3,4,5,6),FUN=mean)
sapply(planets_df,c(3,4,5,6),FUN=mean)
sapply(planets_df,FUN=mean)
apply(planets_df,MARGIN=c(3,4,5,6),FUN=mean)
Sapply(planets_df,FUN=mean)
sapply(planets_df,FUN=mean)
apply(planets_df,MARGIN=c(3,4,5),FUN=mean)
planets_df
apply(planets_df,MARGIN=c(3,4),FUN=mean)
apply(planets_df,FUN=mean)
sapply(planets_df,FUN=mean)
apply(planets_df,FUN=mean)
lapply(planets_df,FUN=mean)
sapply(planets_df,FUN=mean)
apply(planets_df,1:2,FUN=mean)
#sapply(planets_df,1:2,FUN=mean)
```
#sapply(planets_df,1:2,FUN=mean)
planets_df[c("name","type","diameter")]
subset(planets_df,planets_df$type=="planets_df")
subset(planets_df,planets_df$type=="Gas Giant")
subset(planets_df,planets_df$type=="Gas giant")
#vector con numeros del 1 al 10
my_vector <- 1:10
# matriz
my_matrix <- matrix(1:9, ncol = 3)
# la lista contiene diferentes elementos
my_list <-list(my_vector,my_matrix)
my_list
my_list <- list(vec=my_vector, mat=my_matrix )
my_list
my_list$vec
my_list
cities <- c("New York", "Paris",
"London", "Tokyo",
"Rio de Janeiro", "Cape Town")
for(city in cities) {
if(nchar(city) == 6) {
break
}
print(city)
}
for(i in 1:length(cities)) {
print(cities[i])
}
for(city in cities) {
if(nchar(city) == 6) {
next
}
print(city)
}
args(sd)
help(sd)
triple <- function(x=1) {
y <-
3 * x
return(y)
}
triple(2)
triple()
a[3]
a<- list(plantes_df,7,seq(1:3))
a<- list(planets_df,7,seq(1:3))
type(planets_df)
class(planets_df)
class(planets_df)=="dat.frame"
class(planets_df)=="data.frame"
subset(a,funcion(x){return class(x)=="data.frame"})
expected_df<-funcion(x){return class(x)=="data.frame"}
expected_df<-funcion(x){class(x)=="data.frame"}
expected_df<-funcion(x){a<-class(x)=="data.frame"; return a}
return class(x)=="data.frame"
subset(a,expected_df)
a<- list(planets_df,7,seq(1:3))
a[3]
class(planets_df)=="data.frame"
expected_df<-funcion(x){
a<- list(planets_df,7,seq(1:3))
a[3]
class(planets_df)=="data.frame"
expected_df<-funcion(x){
subset(a,is.data.frame)
sapply(a,is.data.frame)
a[sapply(a,is.data.frame)]
a<- list(planets_df,7,seq(1:3))
a[3]
class(planets_df)=="data.frame"
expected_df<-funcion(x){
a<- list(planets_df,7,seq(1:3))
a[3]
class(planets_df)=="data.frame"
expected_df<-funcion(x){
a<- list(planets_df,7,seq(1:3))
a[3]
class(planets_df)=="data.frame"
expected_df<-funcion(x){
a<- list(planets_df,7,seq(1:3))
a[3]
class(planets_df)=="data.frame"
a[~ sapply(a,is.data.frame)]
a<- list(planets_df,7,seq(1:3))
a[3]
class(planets_df)=="data.frame"
a[!sapply(a,is.data.frame)]
!sapply(a,is.data.frame)
sapply(a,is.data.frame)
expected_df<-funcion(x){
funcion(x){
funcion(x){
expected_df<-function(x){
return(class(x)=="data.frame")
}
if (n%%2==0){
return(v[v%%2==0])
}
f (n%%2==0){
install.packages("ggplot2")
install.packages("ggplot2")
else{
return(v[v%%2==1])
myfunc<-function(v){
n<-length(v)
if (n%%2==0){
return(v[v%%2==0])
}
else{
return(v[v%%2==1])
}
}
return(v[v%%2==1])
search()
library("ggplot2")
nstalar paquetes - Load packages: library(), require()
result <- require("data.table")
nyc <- list(pop = 8405837,
boroughs = c("Manhattan", "Bronx", "Brooklyn",
"Queens", "Staten Island"),
capital = FALSE)
nyc <- list(pop = 8405837,
boroughs = c("Manhattan", "Bronx", "Brooklyn",
"Queens", "Staten Island"),
capital = FALSE)
str(li)
str(li)
tr(li)
rep(c(8, 6, 4, 2), times = 2)
rep(1:12,times=2)
```{r}
str(append(li, rev(li)))
li <- list(log = TRUE,
ch = "hello",
int_vec = sort(rep(seq(8, 2, by = -2), times = 2)))
str(li)
str(append(li, rev(li)))
aml@model_ids
#install.packages("h2o")
library(h2o)
h2o.init()
h2o.no_progress()  # Turn off progress bars for notebook readability
df<-as.h2o(iris)
h2o.describe(df)
y <- "Species"
splits <- h2o.splitFrameFrame(df, ratios = 0.8, seed = 1)
y <- "Species"
splits <- h2o.splitFrameFrame(df, ratios = 0.8, seed = 1)
y <- "Species"
splits <- h2o.splitFrameFrame(df, ratios = 0.8, seed = 1)
#install.packages("h2o")
library(h2o)
y <- "Species"
splits <- h2o.splitFrameFrame(df, ratios = 0.8, seed = 1)
y <- "Species"
splits <- h2o.splitFrame(df, ratios = 0.8, seed = 1)
train <- splits[[1]]
test <- splits[[2]]
head(train)
aml <- h2o.automl(y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 180,
seed = 1,
stopping_metric = "AUC",
stopping_rounds = 10,
stopping_tolerance = 0.02,
max_models = 10,
sort_metric = "AUC",
project_name = "iris_model",
include_algos = c("GLM", "DRF", "GBM"))
aml <- h2o.automl(y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 180,
seed = 1,
stopping_metric = "AUC",
stopping_rounds = 10,
stopping_tolerance = 0.02,
max_models = 10,
sort_metric = "AUC",
project_name = "iris_model2",
include_algos = c("GLM", "DRF", "GBM"))
print(aml@leaderboard)
aml@model_ids
aml@model_id
aml@leader
aml@leader[[1]]
aml@leader
aml@leaderboard
aml@leaderboard[[1]]
aml@leaderboard[[1]][1]
models_glm_best <- h2o.getModel(aml@leaderboard[[1]][1])
#print(aml@leaderboard)
aml@leaderboard[[1]][1]
#print(aml@leaderboard)
aml@leaderboard[[1]][1]$model_id
#print(aml@leaderboard)
aml@leaderboard[[1]]
#print(aml@leaderboard)
aml@leaderboard[1]
#print(aml@leaderboard)
aml@leaderboard[1][1]
models_glm_best <- h2o.getModel("GLM_1_AutoML_4_20230221_200732")
models_glm_best@allparameters
#print(aml@leaderboard)
aml@leaderboard[1][
#print(aml@leaderboard)
aml@leaderboard[1]
#print(aml@leaderboard)
aml@leaderboard[1]
#print(aml@leaderboard)
aml@leaderboard[1]
models_glm_best <- aml@leader#h2o.getModel(aml@model_ids[[1]])
models_glm_best@allparameters
setwd("~/freelance/docencia/EOI/clases/introduccion_a_R/01_basicos-R/cursoRbasico/04_RmodelosNoSupervisados")
knitr::opts_chunk$set(echo = TRUE)
df
library(DataExplorer)
df <- read.csv2("https://raw.githubusercontent.com/pvbl/churn-modeling-telco-data/main/telco_dataset.csv", sep=",",dec=".")
#plot_str(df)
```
df <- read.csv2("https://raw.githubusercontent.com/pvbl/churn-modeling-telco-data/main/telco_dataset.csv", sep=",",dec=".")
head(df)
# mira la tipología de cada una de las variables (str,int,float),...
# chequea tenga coherencia (que esté cargando correctamente los numéricos, str,...). En caso de que no sea así, identifica y corrige el problema.
str(df)
#plot_str(df)
## muestra el número de filas y columnas
print("numero de observaciones")
print(nrow(df))
print("número de columnas")
ncol(df)
## muestra un sumary de los datos
summary(df)
##¿Existe alguna(s) variable(s) que sea constante (tenga todos los valores iguales)? Usa para ello la función n_distinct de tidyverse
## Si es así eliminala
rapply(df,n_distinct)
library(tidyverse)
library(caret)
library(DataExplorer)
library('rsample')
library(rpart)
library(rpart.plot)
##¿Existe alguna(s) variable(s) que sea constante (tenga todos los valores iguales)? Usa para ello la función n_distinct de tidyverse
## Si es así eliminala
rapply(df,n_distinct)
table(df$age)
df$year_saved<-NULL
df$source<-NULL
df$age<-NULL
# Evalúa el número de duplicados. En caso de que haya, ¿cuantos hay? Eliminalos
sum(duplicated(df))
df <- df %>% distinct()
sum(duplicated(df))
# idenfica si después de eliminar los duplicados, existe algún customerID duplicado.
sum(duplicated(df$customerID))
# Haz un descriptivo con plot_intro de DataExplorer
plot_intro(df,
title ="Intro",
ggtheme =theme_light(),
theme_config=theme(legend.position="bottom"))
# plotea los missing values con Data Explorer+
plot_missing(df)
# haz un summary del subset del dataframe que contenga los nans (filtra el dataframe con todos los nans y haz un sumary)
summary(df[is.na(df$TotalCharges),])
# evalúa cual es el valor más frecuente de la variable tenure para el subset anterior. Luego mira dentro de todo el dataframe, cuantas veces aparece repetido ese valor más frecuente. ¿Qué crees que puede decirnos esto?
# A qué crees que se debe esto? ¿Qué valor crees que hay que imputar en los NaNs¿
sort(table(df[is.na(df$TotalCharges),]$tenure),decreasing=TRUE)
sum(df$tenure==0)
# imputa el valor de los nans a la columna TotalCharges
df[is.na(df$TotalCharges),"TotalCharges"]<-0
# chequea que no hay missing values ahora
sum(is.na(df))
# analisis del numero de ceros total
## saca el número de ceros que tiene cada columna
## ¿ Qué columna tiene más ceros y a qué se debe?
colSums(df==0)
# transforma las variables tipo str a factor. Usa para ello la función
## mutate_if(dataframe,condicion,funcion de conversion)
df<- mutate_if(df, is.character, as.factor)
library(ggplot2)
# haz un histograma con ggplot2 de la variable tenure que tenga coloreado los bines según el churn
ggplot(df, aes(tenure,col=Churn)) + geom_histogram()
df
ggplot(df, aes(PhoneService,col=Churn)) + geom_bar()
ggplot(df, aes(MonthlyCharges,col=Churn)) + geom_point()
ggplot(df, aes(MonthlyCharges,TotalCharges,col=Churn)) + geom_point()
# haz una gráfica de puntos de total charges en el eje de las y y Monthly Charges en el eje de las X
ggplot(df, aes(MonthlyCharges,TotalCharges)) + geom_point()
# haz una gráfica de puntos de total charges en el eje de las y y Monthly Charges en el eje de las X, la gráfica tiene una forma particular, a qué crees que se debe?
ggplot(df, aes(MonthlyCharges,TotalCharges,col=Contract)) + geom_point()
